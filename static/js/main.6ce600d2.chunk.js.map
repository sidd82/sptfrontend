{"version":3,"sources":["context/store.js","context/reducer/searchReducer.js","context/context.js","B2C/Symbols/TopBar/TopBar.jsx","B2C/Symbols/NavBar/NavBar.jsx","B2C/Home/MainArea/MainArea.jsx","B2C/Symbols/Footer/Footer.jsx","B2C/Home/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["initialState","search","reducer","state","action","type","StateContext","createContext","StateProvider","_ref","children","react_default","a","createElement","Provider","value","useReducer","TopBar","className","NavBar","MainArea","Footer","Home","Symbols_TopBar_TopBar","Symbols_NavBar_NavBar","Home_MainArea_MainArea","Symbols_Footer_Footer","App","context_StateProvider","searchReducer","react_router_dom","react_router","to","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAIeA,EAJM,CACnBC,OAAQ,ICMKC,EAPC,SAACC,EAAOC,GAGlB,OAFIA,EAAOC,KAEJF,GCDAG,EAAeC,0BAEfC,EAAgB,SAAAC,GAAA,IAAGP,EAAHO,EAAGP,QAASF,EAAZS,EAAYT,aAAcU,EAA1BD,EAA0BC,SAA1B,OAE3BC,EAAAC,EAAAC,cAACP,EAAaQ,SAAd,CAAuBC,MAAOC,qBAAWd,EAASF,IAC/CU,ICIUO,eARA,WACb,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,sBACbP,EAAAC,EAAAC,cAAA,wBCOSM,SARA,WACb,OACER,EAAAC,EAAAC,cAAA,OAAKK,UAAU,sBACbP,EAAAC,EAAAC,cAAA,uBCOSO,SAVE,WACf,OACET,EAAAC,EAAAC,cAAA,OAAKK,UAAU,wBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACbP,EAAAC,EAAAC,cAAA,2BCEOQ,SARA,WACb,OACEV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,wBACbP,EAAAC,EAAAC,cAAA,uBCyBSS,EApBF,WACX,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,sBACbP,EAAAC,EAAAC,cAACU,EAAD,MAEAZ,EAAAC,EAAAC,cAACW,EAAD,MAEAb,EAAAC,EAAAC,cAACY,EAAD,MAEAd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,wBACbP,EAAAC,EAAAC,cAAA,yBAIJF,EAAAC,EAAAC,cAACa,EAAD,QCDSC,MAZf,WACE,OACEhB,EAAAC,EAAAC,cAACe,EAAD,CAAe5B,aAAcA,EAAcE,QAAS2B,GAClDlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,GAAG,IAAIC,UAAWX,QCNfY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ce600d2.chunk.js","sourcesContent":["const initialState = {\r\n  search: {}\r\n};\r\n\r\nexport default initialState;\r\n","const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  // eslint-disable-next-line no-unused-expressions\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from \"react\";\r\nimport \"./topbarstyle.css\";\r\n\r\nconst TopBar = () => {\r\n  return (\r\n    <div className=\"topbar-wrapper-spt\">\r\n      <h1>Top Bar</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n","import React from \"react\";\r\n\r\n// Style Import\r\nimport \"./navbarstyle.css\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"navbar-wrapper-spt\">\r\n      <h1>Navbar</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\n// Style Import\r\nimport \"./mainareastyle.css\";\r\n\r\nconst MainArea = () => {\r\n  return (\r\n    <div className=\"mainarea-wrapper-spt\">\r\n      <div className=\"mainarea-spt\">\r\n        <h1>Main Area</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainArea;\r\n","import React from \"react\";\r\nimport \"./footerstyle.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-container-spt\">\r\n      <h1>Footer</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\n// Style Import\r\nimport \"./homestyle.css\";\r\n\r\n// Component Importt\r\nimport TopBar from \"../Symbols/TopBar/TopBar\";\r\nimport NavBar from \"../Symbols/NavBar/NavBar\";\r\nimport MainArea from \"../Home/MainArea/MainArea\";\r\nimport Footer from \"../Symbols/Footer/Footer\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"main-container-spt\">\r\n        <TopBar />\r\n\r\n        <NavBar />\r\n\r\n        <MainArea />\r\n\r\n        <div className=\"infoarea-wrapper-spt\">\r\n          <h1>Info Area</h1>\r\n        </div>\r\n      </div>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// Initial Store And Reducer\nimport initialState from \"./context/store\";\nimport searchReducer from \"./context/reducer/searchReducer\";\n\n// Context Provider Import\nimport { StateProvider } from \"./context/context\";\n\n// Component Import\nimport Home from \"./B2C/Home/Home\";\n\nfunction App() {\n  return (\n    <StateProvider initialState={initialState} reducer={searchReducer}>\n      <Router>\n        <Switch>\n          <Route to=\"/\" component={Home} />\n        </Switch>\n      </Router>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}